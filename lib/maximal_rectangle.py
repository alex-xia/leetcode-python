__author__ = 'Qing'
'''
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing all ones and return its area.
'''

from queue import PriorityQueue

class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        nr = len(matrix)
        if nr == 0:
            return 0
        nc = len(matrix[0])
        self.max_area = 0
        def merge(pre, p, zone):
            res = [(zone[0], zone[1], 1)]
            self.max_area = max(self.max_area, zone[1] - zone[0] + 1)
            pp = p
            for i in range(p, len(pre)):
                if zone[0] > pre[i][1]:
                    continue
                pp = i
                if zone[1] < pre[i][0]:
                    break
                lo, hi, depth = max(zone[0], pre[i][0]), min(zone[1], pre[i][1]), pre[i][2] + 1
                if lo <= res[-1][0] and hi >= res[-1][1] and depth >= res[-1][2]:
                    res.pop()
                res.append((lo, hi, depth))
                self.max_area = max(self.max_area, (hi-lo+1) * depth)
            return res, pp

        def loop_rows(r, pre):
            if r >= nr:
                return
            row = matrix[r]
            beg = -1
            p = 0
            cur = []
            for c in range(nc):
                if row[c] == '1' and (c == 0 or row[c-1] == '0'):
                    beg = c
                if row[c] == '1' and (c == nc-1 or row[c+1] == '0'):
                    new, p = merge(pre, 0, (beg, c))
                    cur.extend(new)
            loop_rows(r+1, cur)

        loop_rows(0, [])

        return self.max_area


if __name__ == '__main__':
    s = Solution()
    # print(s.maximalRectangle(["0010",
    #                           "1111",
    #                           "1111",
    #                           "1110",
    #                           "1100",
    #                           "1111",
    #                           "1110"]))
    print(s.maximalRectangle(["1111111111111101001111111100111011111111",   #0
                              "1111011011111111101101111101111111111111",   #1
                              "0111101011111101101101101111111111111111",   #2
                              "0101101011111111111101111111010110111111",   #3
                              "1111111111110111110110010111111111111111",   #4
                              "1111111110110101111111111101011111101111",   #5
                              "0110110101110011111111111111110111110101",   #6
                              "0111111111111100111111100110011011010101",   #7
                              "1111011110111111111011011011110101101011",   #8
                              "1111111110111111111101101101110111101111",   #9
                              "1110110011111111111100111111111111111111",   #10
                              "1011111110111101111001110111111111111111",   #11
                              "0110111111111111101111110111011111011111",   #12
                              "1111111111111111011111111111110111111011",   #13
                              "1111100111111110101100111111111111101111",   #14
                              "1111101111111110111111011111111111011111",   #15
                              "1111101111111111111111011001111110011111",   #16
                              "1111110111111111011111111111110111110111",   #17
                              "1011111111111111010111110010111110111111",   #18
                              "1111110011111111111110111111111111111011",   #19
                              "1111111111111111110111011111011111011011",   #20
                              "1100011011111111111111011111011111111111",   #21
                              "1111101011111111111101100101110011111111",   #22
                              "1110010111111111111011011110111101111101",   #23
                              "1111111111111101101111111111101111111111",   #24
                              "1111111011111101111011111111111110111111",   #25
                              "1110011111111110111011111111110111110111",   #26
                              "1111111111111100111111010111111111110111",   #27
                              "1111111111111111111111000111111111011101",   #28
                              "1111110111111111111111111101100111011011",   #29
                              "1111011011111101101101111110111111101111",   #30
                              "1111111111011111111111111111111111111111",   #31
                              "1111111111111111111111111111111111111111",   #32
                              "1100011111111110111111111111101111111011",   #33
                              "1111101111111101111010111111111111111111",   #34
                              "0111111111110011111111110101011011111111",   #35
                              "1011011111101111111111101111111111110011",
                              "1010111111111111111111111111111110011111",
                              "0111101111011111111111111111110111111111",
                              "0111111011111111011101111011101111111111",
                              "0111111111110101111011111101011001111011",
                              "1111111111111011110111111101111111101110",
                              "1111101111111100111111111110111111001111",
                              "1101101111110101111101111111100111010100",
                              "0110111111100111110010111110111011011101"]))